=====================================================

2I015 - COMPTE-RENDU TME 2 (Processus)

Noms, prénoms et numéro des étudiants du binôme :
1) Lucas BOISTAY 3809291
2)

=====================================================


EXERCICE 1 : FORK
=================

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>


int main(int argc, char *argv[]){
    if (argc != 2){
        printf("Manque argument n (./exo1 n)\n");
        exit(0);
    }
    char c = *argv[1];
    int n = c - '0';
    printf("debut, n=%d\n",n);

    printf("debut, n=%d\n",n);

    printf("PID initial : %d\n", getpid());

    for (int i=0;i<n;i++){
        if(fork()==0){
            printf("\n------  Je suis un processus nouveau, regarde moi  --------\n");
            printf("pid : %d et ppid :%d\n", getpid(),getppid());
        } else {
            exit(0);
        }
    }
}


EXERCICE 2 : WAIT ET VALEUR DE RETOUR
=====================================

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#define TOO_MUCH_ARG 0


int main(int argc, char *argv[]){

	if (argc != 1){
		printf("Il n'y a pas d'argument à mettre\n");
		exit(TOO_MUCH_ARG);
	}

	int res;
	int entree1;
	int entree2;
	int *status;
	int pid;
	int pidf;

	pid = fork();

	if (pid == 0){
		
		printf("---- Entrez deux nombres ----\n");
		printf("Nombre 1:\n");
		res = scanf("%d",&entree1);
		printf("Nombre 2:\n");
		res = scanf("%d",&entree2);
		printf("%d et %d\n",entree1,entree2);

		if (entree1+entree2 > 10){
			exit(EXIT_SUCCESS);
		} else{
			exit(EXIT_FAILURE);
		}

	} else{

		pidf = wait(status);
		if (*status == EXIT_SUCCESS){
			printf("Bravo, la somme est supérieure à 10\n");
		} else{
			printf("Eh non, la somme n'est pas supérieure à 10 !\n");
		}

	}

}


EXERCICE 3 : MULTI-GREP
=======================

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>

FILE *popen(const char *command, const char *mode);
int pclose(FILE *stream);

void executerCommande(char *commande){

	FILE *cmd;
    char result[1024];

	cmd = popen(commande, "r");
    if (cmd == NULL) {
        perror("popen");
        exit(EXIT_FAILURE);
    }
    while (fgets(result, sizeof(result), cmd)) {
        printf("%s", result);
    }
    pclose(cmd);
}

void avoirCommande(char *mot,char *fichier){
	char *commande = (char *) malloc(100);
	strcat(commande,"grep ");
	strcat(commande,mot);
	strcat(commande," ");
	strcat(commande,fichier);
	printf("Commande écrite : %s\n", commande);
	printf("Voici la liste des mots comprenants \" %s \" :\n", mot);
	executerCommande(commande);
	free(commande);
}



int main(int argc, char *argv[]){

    int n = argc-2;
    printf("debut, n=%d\n",n);

    printf("PID initial : %d\n", getpid());

    for (int i=0;i<n;i++){
        if(fork()==0){
            printf("\n------  Je suis un processus nouveau, regarde moi  --------\n");
            printf("pid : %d et ppid :%d\n", getpid(),getppid());
            printf("Fichier sondé : %s\n", argv[i+2]);
            avoirCommande(argv[1],argv[i+2]);
        } else {
            exit(0);
        }
    }


    return 0;
}


EXERCICE 4 : MULTI-GREP CONTRAINT
=================================

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>
#include <sys/wait.h>
#define MAX_FILS 3

FILE *popen(const char *command, const char *mode);
int pclose(FILE *stream);

void executerCommande(char *commande){

    FILE *cmd;
    char result[1024];

    cmd = popen(commande, "r");
    if (cmd == NULL) {
        perror("popen");
        exit(EXIT_FAILURE);
    }
    while (fgets(result, sizeof(result), cmd)) {
        printf("%s", result);
    }
    pclose(cmd);
}

void avoirCommande(char *mot,char *fichier){
    char *commande = (char *) malloc(100);
    strcat(commande,"grep ");
    strcat(commande,mot);
    strcat(commande," ");
    strcat(commande,fichier);
    printf("Commande écrite : %s\n", commande);
    printf("Voici la liste des mots comprenants \" %s \" :\n", mot);
    executerCommande(commande);
    free(commande);
}



int main(int argc, char *argv[]){

    if (argc < 3){
        printf("Il manque des arguments (exo4 \"mot recherché\" [fichier1] [fichier2] ...\n");
        exit(0);
    }

    int n = argc-2;
    printf("debut, n=%d\n",n);

    printf("PID initial : %d\n", getpid());

    int i = 0;
    int proc_actif = n;

    while (proc_actif != 0){
        if(fork()==0){
            if (i>=MAX_FILS)
            {
                int *status;
                printf("ARRET\n");
                wait(status);
            } else{
                printf("go\n");
            }
            proc_actif--;
            printf("\n------  Je suis un processus nouveau %d, regarde moi  --------\n",i);
            printf("pid : %d et ppid :%d\n", getpid(),getppid());
            printf("Fichier sondé : %s\n", argv[i+2]);
            avoirCommande(argv[1],argv[i+2]);
            i++;
        } else {
            exit(0);
        }
    }
    printf("--> Fin process \n");


    return 0;
}
