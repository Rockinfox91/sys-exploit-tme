=====================================================

2I015 - COMPTE-RENDU TME 4 (Verrouillage)

Noms, prénoms et numéro des étudiants du binôme :
1) BOISTAY Lucas 3809291
2) //

=====================================================


EXERCICE 1 : Première et deuxième écritures
===========================================

Recopiez le code source de votre programme (exo1.c) ici.


EXERCICE 2 : Atchoum et Dormeur
===============================

Question 1 : 

Oui la journée sera correcte, les programmes se bloquent au niveau de lockf si les toilettes sont déjà occupés.

Question 2 :

On remarque ici que chaque programme bloque le fichier durant L'ENTIERETE de son fonctionnement, c'est à dire que même si dormeur sort des toilettes celles-ci sont toujours bloquées.

Question 3 :

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int argc, char *argv[]){

	srand(getpid());
	int i,k;
	
	int verrou=open("verrou",O_CREAT|O_RDWR,S_IRUSR|S_IWUSR);
	lseek(verrou,0,SEEK_SET);
	lockf(verrou,F_LOCK,0);
	
	printf("Dormeur rentre aux toilettes\n");
	sleep(1);
	for(k=rand()%10;k>=0;k--){
		lseek(verrou,0,SEEK_SET);
		lockf(verrou,F_ULOCK,0);
		printf("Dormeur sort des toilettes\n");
		for(i=rand()%6;i>=0;i--){
			printf("zzzz\n");
			sleep(1);
		}
		lseek(verrou,0,SEEK_SET);
		lockf(verrou,F_LOCK,0);
		printf("Dormeur rentre aux toilettes\n");
		sleep(1);
	}
	printf("Dormeur sort des toilettes\n");

	lseek(verrou,0,SEEK_SET);
	lockf(verrou,F_ULOCK,0);

	close(verrou);

	exit(EXIT_SUCCESS);
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int argc, char *argv[]){

	srand(getpid());
	int i,k;
	
	int verrou=open("verrou",O_CREAT|O_RDWR,S_IRUSR|S_IWUSR);

	for(k=rand()%10;k>=0;k--){
		for(i=rand()%4;i>=0;i--){
			printf("Atchoum !\n");
			sleep(1);
		}
		lseek(verrou,0,SEEK_SET);
		lockf(verrou,F_LOCK,0);
		printf("Atchoum rentre aux toilettes\n");
		sleep(1);
		printf("Atchoum sort des toilettes\n");
		lseek(verrou,0,SEEK_SET);
		lockf(verrou,F_ULOCK,0);
		for(i=rand()%4;i>=0;i--){
			printf("Atchoum !\n");
			sleep(1);
		}
	}

	close(verrou);

	exit(EXIT_SUCCESS);
}



EXERCICE 3 : Allons faire un tour à la piscine...
=================================================

Question 1 : 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int takeRessource(char* ressource){
	int fichier = open(ressource, O_RDWR);
	char valeur;
	int resultat = 0;

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_LOCK,0);

	lseek(fichier,0,SEEK_SET);
	read(fichier,&valeur,1);

	printf("Lecture %s : %c\n", ressource, valeur);

	if(valeur-'0'>0){ 
		valeur --;
		printf("Ressource prise, il en reste donc %c\n", valeur);
		lseek(fichier,0,SEEK_SET);
		write(fichier, &valeur, 1);
		resultat = 1; //Ressource prise donc renvoie 1
	}

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_ULOCK,0);

	close(fichier);
	return resultat;
}

void giveRessource(char* ressource){
	int fichier = open(ressource, O_RDWR);
	char valeur;

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_LOCK,0);

	read(fichier,&valeur,1);

	valeur ++;
	printf("Ressource rendu, il en reste donc %c\n", valeur); 
	lseek(fichier,0,SEEK_SET);
	write(fichier, &valeur, 1);

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_ULOCK,0);

	close(fichier);
}


int main(int argc, char* argv[]){
	int id = atoi(argv[1]);
	printf("Baigneur %d arrive à la piscine.\n", id);

	while(takeRessource("cabines.txt")==0){
		printf("Baigneur %d attend pour les cabines\n", id);
		sleep(1);
	}
	printf("Baigneur %d prend une cabine.\n", id);
	while(takeRessource("paniers.txt")==0){
		printf("Baigneur %d attend pour les paniers\n", id);
		sleep(1);
	}
	printf("Baigneur %d prend un panier.\n", id);

	printf("Baigneur %d se change\n", id);
	sleep(1);

	giveRessource("cabines.txt");
	printf("Baigneur %d libère la cabine\n", id);

	for(int i = rand()%10 ; i>=0 ; i--){
		printf("Baigneur %d se baigne\n", id);
		sleep(1);
	}

	while(takeRessource("cabines.txt")==0){
		printf("Baigneur %d attend pour les cabines\n", id);
		sleep(1);
	}
	printf("Baigneur %d prend une cabine.\n", id);

	printf("Baigneur %d se change\n", id);
	sleep(1);

	giveRessource("cabines.txt");
	giveRessource("paniers.txt");
	printf("Baigneur %d libère la cabine\n", id);
	printf("Baigneur %d libère le panier\n", id);

	printf("Baigneur %d s'en va de la piscine\n", id);




	return 1;
}

Question 2 :

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

void setFichier(char* nom, int nb){
	int fichier = open(nom,O_CREAT|O_WRONLY,S_IWUSR);

	char buf = nb +'0';

	write(fichier, &buf, sizeof(char));

	close(fichier);
}

int main(int argc, char* argv[]){
	if(argc < 4){
		printf("Pas assez d'arguments (baigneur, cabine, panier)\n");
		return 0;
	}

	setFichier("cabines.txt",atoi(argv[2]));
	setFichier("paniers.txt",atoi(argv[3]));

	printf("----- Début du programme -----\n");


	char argument[2] = "0";

	for(int i = 0 ; i< atoi(argv[1]) - 1 ; i++){
		if(fork()==0){
			sprintf(argument,"%d",i+1);
			printf("Nouveau fils : %s\n", argument);
			break;
		}
		else{
		}
	}

	printf("Fils %s execute le programme\n", argument);
	execl("Exo3a","Exo3a",argument,NULL);

	return 1;
}

Question 4 :

Réponse et justification

On remarque un blocage entre les cabines et les paniers.
En effet, les nageurs peuvent prendre une cabine même si il n'y a aucun panier de libre. A ce moment là, les nageurs qui sortent de la piscine ne peuvent donc pas prendre de cabine pour reposer leur panier. Il y a donc un blocage.

On peut le résoudre en testant si cabine et paniers sont disponibles au même moment.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int takeRessource(char* ressource){
	int fichier = open(ressource, O_RDWR);
	char valeur;
	int resultat = 0;

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_LOCK,0);

	lseek(fichier,0,SEEK_SET);
	read(fichier,&valeur,1);

	printf("Lecture %s : %c\n", ressource, valeur);

	if(valeur-'0'>0){ 
		valeur --;
		printf("Ressource prise, il en reste donc %c\n", valeur);
		lseek(fichier,0,SEEK_SET);
		write(fichier, &valeur, 1);
		resultat = 1; //Ressource prise donc renvoie 1
	}

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_ULOCK,0);

	close(fichier);
	return resultat;
}

void giveRessource(char* ressource){
	int fichier = open(ressource, O_RDWR);
	char valeur;

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_LOCK,0);

	read(fichier,&valeur,1);

	valeur ++;
	printf("Ressource rendu, il en reste donc %c\n", valeur); 
	lseek(fichier,0,SEEK_SET);
	write(fichier, &valeur, 1);

	lseek(fichier,0,SEEK_SET);
	lockf(fichier,F_ULOCK,0);

	close(fichier);
}


int main(int argc, char* argv[]){
	int id = atoi(argv[1]);
	printf("Baigneur %d arrive à la piscine.\n", id);

	while(takeRessource("cabines.txt")==0 && takeRessource("paniers.txt")==0){
		printf("Baigneur %d attend pour les cabines ou paniers\n", id);
		sleep(1);
	}
	printf("Baigneur %d prend une cabine.\n", id);
	printf("Baigneur %d prend un panier.\n", id);

	printf("Baigneur %d se change\n", id);
	sleep(1);

	giveRessource("cabines.txt");
	printf("Baigneur %d libère la cabine\n", id);

	for(int i = rand()%10 ; i>=0 ; i--){
		printf("Baigneur %d se baigne\n", id);
		sleep(1);
	}

	while(takeRessource("cabines.txt")==0){
		printf("Baigneur %d attend pour les cabines\n", id);
		sleep(1);
	}
	printf("Baigneur %d prend une cabine.\n", id);

	printf("Baigneur %d se change\n", id);
	sleep(1);

	giveRessource("cabines.txt");
	giveRessource("paniers.txt");
	printf("Baigneur %d libère la cabine\n", id);
	printf("Baigneur %d libère le panier\n", id);

	printf("Baigneur %d s'en va de la piscine\n", id);




	return 1;
}